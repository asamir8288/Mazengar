<?php

/**
 * ShopProducts
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    ##PACKAGE##
 * @subpackage ##SUBPACKAGE##
 * @author     ##NAME## <##EMAIL##>
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class ShopProducts extends BaseShopProducts {

    public function addProduct(array $productData) {
        $availability = false;
        if ($productData['availability'] == 'yes') {
            $availability = true;
        }

        $main_img = '';
        if (isset($productData['main_img'])) {
            $main_img = $productData['main_img'];
        }

        $sub_id = $productData['product_id'];
        if (isset($productData['sub_id'])) {
            $sub_id = $productData['sub_id'];
        }

        $p = new ShopProducts();
        $p->sub_id = $sub_id;
        $p->category_filter_id = $productData['category_filter_id'];
        $p->name = $productData['name'];
        $p->price = $productData['price'];
        $p->currency_id = $productData['currency_id'];
        $p->discount = $productData['discount'];
        $p->availability = $availability;
        $p->description = $productData['description'];
        $p->main_img = $main_img;
        $p->created_at = date('ymdHis');
        $p->save();

        $product_id = $p->id;

        /*
         * Add the product items (addional description, uploaded pics and videos links)
         */
        $this->addProductComponents($productData, $product_id);
    }

    public function updateProduct(array $productData) {
        $availability = false;
        if ($productData['availability'] == 'yes') {
            $availability = true;
        }

        $main_img = '';
        if (isset($productData['main_img'])) {
            $main_img = $productData['main_img'];
        }

        $sub_id = $productData['product_id'];
        if (isset($productData['sub_id'])) {
            $sub_id = $productData['sub_id'];
        }

        Doctrine_Query::create()
                ->update('ShopProducts p')
                ->set('p.sub_id', '?', $sub_id)
                ->set('p.category_filter_id', '?', $productData['category_filter_id'])
                ->set('p.name', '?', $productData['name'])
                ->set('p.price', '?', $productData['price'])
                ->set('p.currency_id', '?', $productData['currency_id'])
                ->set('p.discount', '?', $productData['discount'])
                ->set('p.availability', '?', $availability)
                ->set('p.description', '?', $productData['description'])
                ->set('p.main_img', '?', $main_img)
                ->set('p.updated_at', '?', date('ymdHis'))
                ->where('p.id=?', $productData['prod_id'])
                ->execute();

        /*
         * Add the product items (addional description, uploaded pics and videos links)
         */
        $this->deleteProductComponents($productData['prod_id']);
        $this->addProductComponents($productData, $productData['prod_id']);
    }

    private function addProductComponents(array $productData, $product_id) {
        $spc = new ShopProductComponents();
        if (isset($productData['addional_desc'])) {
            foreach ($productData['addional_desc'] as $item) {
                $componentsdata['product_id'] = $product_id;
                $componentsdata['item'] = $item;
                $componentsdata['type'] = 'text';

                $spc->addProdComponents($componentsdata);
            }
        }
        if (isset($productData['additional_imgs'])) {
            foreach ($productData['additional_imgs'] as $item) {
                $componentsdata['product_id'] = $product_id;
                $componentsdata['item'] = $item;
                $componentsdata['type'] = 'image';

                $spc->addProdComponents($componentsdata);
            }
        }
        if (isset($productData['additional_vedio'])) {
            foreach ($productData['additional_vedio'] as $item) {
                $componentsdata['product_id'] = $product_id;
                $componentsdata['item'] = $item;
                $componentsdata['type'] = 'vedio';

                $spc->addProdComponents($componentsdata);
            }
        }
    }

    private function deleteProductComponents($product_id) {
        Doctrine_Query::create()
                ->delete('ShopProductComponents pc')
                ->where('pc.product_id=?', $product_id)
                ->execute();
    }

    public function activateDeactivate($product_id) {
        $status = false;
        if ($this->isProductActive($product_id))
            $status = true;

        Doctrine_Query::create()
                ->update('ShopProducts sp')
                ->set('sp.availability', '?', $status)
                ->where('sp.id=?', $product_id)
                ->execute();

        return $status;
    }

    private function isProductActive($product_id) {
        $q = Doctrine_Query::create()
                ->select('sp.availability as is_active')
                ->from('ShopProducts sp')
                ->where('sp.id=?', $product_id)
                ->setHydrationMode(Doctrine_Core::HYDRATE_ARRAY)
                ->fetchOne();


        if ($q['is_active'])
            return false;
        return true;
    }

    public function deleteProduct($product_id) {
        Doctrine_Query::create()
                ->update('ShopProducts sp')
                ->set('sp.deleted', '?', true)
                ->where('sp.id=?', $product_id)
                ->execute();
    }

    public function getOne($id) {
        return Doctrine_Query::create()
                        ->select('p.*, pc.*')
                        ->from('ShopProducts p, p.ShopProductComponents pc')
                        ->where('p.id=?', $id)
                        ->setHydrationMode(Doctrine_Core::HYDRATE_ARRAY)
                        ->fetchOne();
    }

    public function hardDeleteProducts($shop_id){
        Doctrine_Query::create()
                ->delete('ShopProducts p')
                ->where('p.sub_id IN (SELECT ms.id FROM ShopMenuSubs ms WHERE ms.shop_id='. $shop_id .')')
                ->execute();
    }
}