<?php

/**
 * ShopsTable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class ShopsTable extends Doctrine_Table {

    /**
     * Returns an instance of this class.
     *
     * @return object ShopsTable
     */
    public static function getInstance() {
        return Doctrine_Core::getTable('Shops');
    }

    public static function getShops() {
        return Doctrine_Query::create()
                        ->select('s.*, op.*, p.*, c.name, m.id, b.deleted, b.name, b.longitude, b.latitude, b.city, b.tel1, b.tel2, b.fax, b.email, b.main_img, col.name, pc.*, cf.*, bf.*, sbf.*, o.*, oc.*')
                        ->from('Shops s, s.LookupShopCategories c, s.ShopMenuSubs m, s.ShopOnlinePresence op')
                        ->leftJoin('m.ShopProducts p ON p.sub_id=m.id')
                        ->leftJoin('m.ShopBranches b ON b.menu_id=m.id')
                        ->leftJoin('b.LookupCollections col')
                        ->leftJoin('b.BranchFilters bf, bf.ShopCategoryFilters sbf')
                        ->leftJoin('p.ShopProductComponents pc')
                        ->leftJoin('p.ShopCategoryFilters cf')
                        ->leftJoin('m.ShopOffers o')
                        ->leftJoin('o.ShopOfferComponents oc')
                        ->where('s.deleted=0')
                        ->orderBy('RAND()')
                        ->setHydrationMode(Doctrine_Core::HYDRATE_ARRAY)
                        ->execute();
    }

    public static function getShopsByCityOrCategory($category_id = '', $city_name = '') {
        $q = Doctrine_Query::create()
                ->select('s.*, op.*')
                ->from('Shops s, s.ShopOnlinePresence op')
                ->where('s.deleted=0');
        if ($category_id) {
            $q = $q->andWhere('s.category_id=?', $category_id);
        }
        if ($city_name) {
            $q = $q->andWhere('s.city=?', $city_name);
        }

        $q = $q->orderBy('RAND()')
                ->setHydrationMode(Doctrine_Core::HYDRATE_ARRAY)
                ->execute();
        
        return $q;
    }
    
    public static function getShopsCities(){
        return Doctrine_Query::create()
                ->select('DISTINCT(s.city)')
                ->from('Shops s')
                ->setHydrationMode(Doctrine_Core::HYDRATE_ARRAY)
                ->execute();
    }

}