<?php

/**
 * ShopOffers
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    ##PACKAGE##
 * @subpackage ##SUBPACKAGE##
 * @author     ##NAME## <##EMAIL##>
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class ShopOffers extends BaseShopOffers {

    public function addOffer(array $offerData) {
        $availability = false;
        if ($offerData['availability'] == 'yes') {
            $availability = true;
        }
        $main_img = '';
        if (isset($offerData['main_pic'])) {
            $main_img = $offerData['main_pic'];
        }

        $sub_id = $offerData['shop_id'];
        if (isset($offerData['sub_id'])) {
            $sub_id = $offerData['sub_id'];
        }

        $o = new ShopOffers();
        $o->sub_id = $sub_id;
        $o->name = $offerData['name'];
        $o->price_before_discount = $offerData['price_before_discount'];
        $o->price_after_discount = $offerData['price_after_discount'];
        $o->start_date = date('ymdHis', strtotime($offerData['start_date']));
        $o->end_date = date('ymdHis', strtotime($offerData['end_date']));
        $o->availability = $availability;
        $o->description = $offerData['description'];
        $o->main_pic = $main_img;
        $o->created_at = date('ymdHis');
        $o->save();

        $offer_id = $o->id;

        /*
         * Add the product items (addional description, uploaded pics and videos links)
         */
        $this->addOfferComponents($offerData, $offer_id);
    }
    
    public function updateOffer(array $offerData) {
        $availability = false;
        if ($offerData['availability'] == 'yes') {
            $availability = true;
        }
        $main_img = '';
        if (isset($offerData['main_pic'])) {
            $main_img = $offerData['main_pic'];
        }

        $sub_id = $offerData['shop_id'];
        if (isset($offerData['sub_id'])) {
            $sub_id = $offerData['sub_id'];
        }

        Doctrine_Query::create()
                ->update('ShopOffers o')
                ->set('o.sub_id', '?', $sub_id)
                ->set('o.name', '?', $offerData['name'])
                ->set('o.price_before_discount', '?', $offerData['price_before_discount'])
                ->set('o.price_after_discount', '?', $offerData['price_after_discount'])
                ->set('o.start_date', '?', date('ymdHis', strtotime($offerData['start_date'])))
                ->set('o.end_date', '?', date('ymdHis', strtotime($offerData['end_date'])))
                ->set('o.availability', '?', $availability)
                ->set('o.description', '?', $offerData['description'])
                ->set('o.main_pic', '?', $main_img)
                ->set('o.updated_at', '?', date('ymdHis'))
                ->where('o.id =?', $offerData['offer_id'])
                ->execute();

        /*
         * Add the product items (addional description, uploaded pics and videos links)
         */
        $this->deleteOfferComponents($offerData['offer_id']);
        $this->addOfferComponents($offerData, $offerData['offer_id']);
    }

    private function addOfferComponents(array $offerData, $offer_id) {
        $soc = new ShopOfferComponents();
        if (isset($offerData['addional_desc'])) {
            foreach ($offerData['addional_desc'] as $item) {
                $componentsdata['offer_id'] = $offer_id;
                $componentsdata['item'] = $item;
                $componentsdata['type'] = 'text';

                $soc->addOfferComponents($componentsdata);
            }
        }
        if (isset($offerData['additional_imgs'])) {
            foreach ($offerData['additional_imgs'] as $item) {
                $componentsdata['offer_id'] = $offer_id;
                $componentsdata['item'] = $item;
                $componentsdata['type'] = 'image';

                $soc->addOfferComponents($componentsdata);
            }
        }
        if (isset($offerData['additional_vedio'])) {
            foreach ($offerData['additional_vedio'] as $item) {
                $componentsdata['offer_id'] = $offer_id;
                $componentsdata['item'] = $item;
                $componentsdata['type'] = 'vedio';

                $soc->addOfferComponents($componentsdata);
            }
        }
    }
    
    private function deleteOfferComponents($offer_id) {
        Doctrine_Query::create()
                ->delete('ShopOfferComponents oc')
                ->where('oc.offer_id=?', $offer_id)
                ->execute();
    }

    public function activateDeactivate($offer_id) {
        $status = false;
        if ($this->isOfferActive($offer_id))
            $status = true;

        Doctrine_Query::create()
                ->update('ShopOffers so')
                ->set('so.availability', '?', $status)
                ->where('so.id=?', $offer_id)
                ->execute();

        return $status;
    }

    private function isOfferActive($offer_id) {
        $q = Doctrine_Query::create()
                ->select('so.availability as is_active')
                ->from('ShopOffers so')
                ->where('so.id=?', $offer_id)
                ->setHydrationMode(Doctrine_Core::HYDRATE_ARRAY)
                ->fetchOne();


        if ($q['is_active'])
            return false;
        return true;
    }

    public function deleteOffer($offer_id) {
        Doctrine_Query::create()
                ->update('ShopOffers so')
                ->set('so.deleted', '?', true)
                ->where('so.id=?', $offer_id)
                ->execute();
    }

    public function getOne($id) {
        return Doctrine_Query::create()
                        ->select('o.*, oc.*')
                        ->from('ShopOffers o, o.ShopOfferComponents oc')
                        ->where('o.id=?', $id)
                        ->setHydrationMode(Doctrine_Core::HYDRATE_ARRAY)
                        ->fetchOne();
    }
    
    public function hardDeleteOffers($shop_id){
        Doctrine_Query::create()
                ->delete('ShopOffers o')
                ->where('o.sub_id IN (SELECT ms.id FROM ShopMenuSubs ms WHERE ms.shop_id='. $shop_id .')')
                ->execute();
    }

}